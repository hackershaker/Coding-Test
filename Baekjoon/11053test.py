from unittest import TestCase, main, mock
import importlib


p11053 = importlib.import_module('11053')


class testClass(TestCase):
    testcase = [
        (['1', '1'], 1),
        (['2', '2 1'], 1),
        (['4', '1 4 2 3'], 3),
        (['4', '1 1 1 2'], 2),
        (['4', '1 2 4 3'], 3),
        (['4', '4 2 1 3'], 2),
        (['4', '4 2 3 1'], 2),
        (['4', '4 1 3 2'], 2),
        (['4', '4 1 2 3'], 3),
        (['4', '1 3 4 5'], 4),
        (['4', '1 3 4 2'], 3),
        (['5', '5 4 3 2 1'], 1),
        (['5', '1 5 2 6 3'], 3),
        (['6', '5 1 2 4 1 3'], 3),
        (['6', '10 20 10 30 20 50'], 4),
        (['6', '10 20 10 20 30 40'], 4),
        (['6', '1 4 1 5 1 6'], 4),
        (['6', '5 4 7 5 2 1'], 2),
        (['6', '9 9 1 8 1 2'], 2),
        (['6', '1 5 6 1 2 3'], 3),
        (['8', '90 100 10 20 30 40 50 60'], 6),
        (['8', '1 2 3 4 6 2 1 5'], 5),
        (['8', '1 6 7 2 3 4 5 6'], 6),
        (['8', '8 1 2 5 7 2 4 6'], 4),
        (['8', '2 5 7 2 4 1 6 8'], 4),
        (['8', '1 1 1 2 1 3 1 1'], 3),
        (['8', '1 5 6 2 3 7 9 3'], 5),
        (['8', '1 2 5 3 4 1 2 4'], 4),
        (['8', '9 7 9 7 1 5 6 5'], 3),
        (['8', '7 6 5 4 3 2 1 8'], 2),
        (['8', '7 6 5 2 1 1 1 1'], 1),
        (['8', '7 6 5 8 7 6 2 3'], 2),
        (['8', '4 5 6 7 1 2 3 8'], 5),
        (['8', '3 5 7 9 2 1 4 8'], 4),
        (['9', '10 20 30 40 10 20 30 40 50'], 5),
        (['10', '1 3 5 7 1 2 3 4 5 6'], 6),
        (['11', '10 30 20 40 30 50 60 40 20 30 50'], 5),
        (['11', '1 2 3 4 2 3 5 3 5 6 7'], 7),
        (['12', '1 10 2 8 3 11 9 12 5 7 4 5'], 5),
        (['12', '1 1 2 2 3 1 3 4 5 2 4 5'], 5),
        (['12', '2 2 3 1 3 4 1 1 5 2 4 5'], 4),
        (['12', '1 3 5 9 2 4 5 6 1 2 3 7'], 6),
    ]


    def test11053(self):
        for case, answer in testClass.testcase:
            with mock.patch('builtins.input', side_effect = case):
                self.assertEqual(p11053.solution(), answer, f'{case}, {answer}')


if __name__=='__main__':
    main()