{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"BaekJoonTestCode": {
			"prefix": "BaekJoonTestCode",
			"body": [
				"from unittest import TestCase, main, mock",
				"import importlib",
				"\n",
				"p1000 = importlib.import_module('1000')",
				"\n",
				"class testClass(TestCase):",
				"	testcase = [",
				"		(['${1:test}'], '${2:answer}'),",
				"	]",
				"\n",
				"	def test1000(self):",
				"		for case, answer in testClass.testcase:",
				"			with mock.patch('builtins.input', side_effect = case):",
				"				self.assertEqual(p1000.solution(), answer)",
				"\n",
				"if __name__=='__main__':",
				"	main()",
			],
			"description": "test code template for BaekJoon Online Judge"
		},
	"ProgrammersTestCode": {
			"prefix": "ProgrammersTestCode",
			"body": [
				"from unittest import TestCase, main",
				"import importlib",
				"\n",
				"p1000 = importlib.import_module('1000')"
				"\n",
				"class testClass(TestCase):",
				"	testcase = [",
				"		(('${1:test}',), '${2:answer}'),",
				"	]",
				"\n",
				"	def test1000(self):",
				"		for case, answer in testClass.testcase:",
				"			self.assertEqual(p67259.solution(*case), answer)",
				"\n",
				"if __name__=='__main__':",
				"	main()",
			],
			"description": "test code template for Programmers"
		}
}